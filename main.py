from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
import logging
import random

# === CONFIG ===
API_TOKEN = '7596145421:AAFMkGYtjaJRxwP-G5sl-t3lj7jxQaPboqE'
ADMIN_ID = 8070055531  # Telegram ID –∞–¥–º–∏–Ω–∞

# === SETUP ===
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
user_orders = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ user_id
pending_orders = {}  # –ó–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

# === HANDLERS ===

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–î–Ω–µ–ø—Ä", callback_data="city_dnepr"))

    await message.answer(
        f"–ö—É –±—Ä–æ, - {message.from_user.username or message.from_user.first_name}\n\n"
        "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º —à–æ–ø–µ.\n"
        "–û–ø–µ—Ä–∞—Ç–æ—Ä: @shmalebanutaya\n"
        "–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª - [—Å—Å—ã–ª–∫–∞]",
        reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data == "city_dnepr")
async def city_selected(callback_query: types.CallbackQuery):
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 1 - 1–≥—Ä - 300 –≥—Ä–Ω", callback_data="product_1"),
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 2 - 2–≥—Ä - 570 –≥—Ä–Ω", callback_data="product_2"),
        InlineKeyboardButton("–¢–æ–≤–∞—Ä 3 - 3–≥—Ä - 820 –≥—Ä–Ω", callback_data="product_3")
    )
    await callback_query.message.edit_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ –î–Ω–µ–ø—Ä.\n–ß—Ç–æ —Ç–µ–±–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ–ª–æ—Å—å?", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data.startswith("product_"))
async def product_selected(callback_query: types.CallbackQuery):
    product_map = {
        "product_1": "–¢–æ–≤–∞—Ä 1 - 1–≥—Ä - 300 –≥—Ä–Ω",
        "product_2": "–¢–æ–≤–∞—Ä 2 - 2–≥—Ä - 570 –≥—Ä–Ω",
        "product_3": "–¢–æ–≤–∞—Ä 3 - 3–≥—Ä - 820 –≥—Ä–Ω",
    }
    product_name = product_map[callback_query.data]
    price = product_name.split('-')[-1].strip()

    user_orders[callback_query.from_user.id] = {
        "product": product_name,
        "price": price
    }

    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("–ö–∏—Ä–æ–≤–∞", callback_data="area_kirova"),
        InlineKeyboardButton("–ù–∞—á–∞–ª–æ –ø—Ä. –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ", callback_data="area_bh")
    )
    await callback_query.message.edit_text(
        f"–ò–∑–±—Ä–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {product_name}\n"
        f"–ö–æ—Ä–æ—Ç–∫–æ –æ —Ç–æ–≤–∞—Ä–µ: (—Å–∞–º –∏–∑–º–µ–Ω–∏—à—å)\n"
        f"–¶–µ–Ω–∞: {price}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–π–æ–Ω:", reply_markup=markup
    )

@dp.callback_query_handler(lambda c: c.data.startswith("area_"))
async def area_selected(callback_query: types.CallbackQuery):
    data = user_orders.get(callback_query.from_user.id)
    if not data:
        return await callback_query.message.edit_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ /start")

    area_map = {
        "area_kirova": "–ö–∏—Ä–æ–≤–∞",
        "area_bh": "–ù–∞—á–∞–ª–æ –ø—Ä. –ë–æ–≥–¥–∞–Ω–∞ –•–º–µ–ª—å–Ω–∏—Ü–∫–æ–≥–æ"
    }
    area = area_map[callback_query.data]

    order_id = random.randint(20000, 99999)
    data.update({
        "order_id": order_id,
        "city": "–î–Ω–µ–ø—Ä",
        "area": area
    })

    user_orders[callback_query.from_user.id] = data
    pending_orders[order_id] = {
        **data,
        "user_id": callback_query.from_user.id,
        "username": callback_query.from_user.username
    }

    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç—É", callback_data="pay_card"))

    await callback_query.message.edit_text(
        f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω! –ê–¥—Ä–µ—Å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ: {order_id}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:", reply_markup=markup
    )

    admin_markup = InlineKeyboardMarkup()
    admin_markup.add(
        InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
    )

    await bot.send_message(ADMIN_ID,
        f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}\n"
        f"–Æ–∑–µ—Ä: @{callback_query.from_user.username}\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        f"–†–∞–π–æ–Ω: {data['area']}",
        reply_markup=admin_markup
    )

@dp.callback_query_handler(lambda c: c.data == "pay_card")
async def payment_selected(callback_query: types.CallbackQuery):
    data = user_orders.get(callback_query.from_user.id)
    if not data:
        return await callback_query.message.edit_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä /start")

    await callback_query.message.edit_text(
        f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ: {data['order_id']}\n"
        f"–ì–æ—Ä–æ–¥: {data['city']}\n"
        f"–¢–æ–≤–∞—Ä: {data['product']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n\n"
        "–í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É.\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç—É: 0000 0000 0000 0000 (–≤—Å—Ç–∞–≤—å —Å–∞–º)\n"
        f"–°—É–º–º–∞: {data['price']}\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∫–∏–Ω—å —Å–∫—Ä–∏–Ω —Å—é–¥–∞."
    )

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photo(message: types.Message):
    if message.from_user.id not in user_orders:
        return await message.reply("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä /start")

    await bot.send_message(ADMIN_ID, f"üì§ –°–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç @{message.from_user.username} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{user_orders[message.from_user.id]['order_id']}")
    await bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    await message.reply("–°–∫—Ä–∏–Ω –ø–æ–ª—É—á–µ–Ω! –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

@dp.message_handler(commands=["admin"])
async def admin_panel(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    if not pending_orders:
        return await message.reply("–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")

    for order_id, order in pending_orders.items():
        markup = InlineKeyboardMarkup()
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{order_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{order_id}")
        )
        await message.answer(
            f"–ó–∞–∫–∞–∑ #{order_id}\n–Æ–∑–µ—Ä: @{order['username']}\n–¢–æ–≤–∞—Ä: {order['product']}\n–¶–µ–Ω–∞: {order['price']}",
            reply_markup=markup
        )

@dp.callback_query_handler(lambda c: c.data.startswith("approve_") or c.data.startswith("reject_"))
async def process_admin_action(callback_query: types.CallbackQuery):
    action, order_id_str = callback_query.data.split("_")
    order_id = int(order_id_str)
    order = pending_orders.pop(order_id, None)

    if not order:
        return await callback_query.answer("–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")

    if action == "approve":
        await bot.send_message(order["user_id"], f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä.")
        await callback_query.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")
    else:
        await bot.send_message(order["user_id"], f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω. –°–≤—è–∂–∏—Å—å —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
        await callback_query.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

# –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
awaiting_photo_to_send = {}

@dp.message_handler(commands=["send"])
async def send_photo_command(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

    args = message.text.split()
    if len(args) < 2:
        return await message.reply("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ü—Ä–∏–º–µ—Ä: /send 70214")

    order_id = int(args[1])
    if order_id not in pending_orders:
        return await message.reply("–ó–∞–∫–∞–∑ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    awaiting_photo_to_send[message.from_user.id] = order_id
    await message.reply(f"–ñ–¥—É —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–∞–∑–∞ #{order_id}.")

@dp.message_handler(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT])
async def admin_send_photo_to_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return  # –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç —Å–≤–æ–∏ —Å–∫—Ä–∏–Ω—ã, –∫–∞–∫ —Ä–∞–Ω—å—à–µ

    if message.from_user.id not in awaiting_photo_to_send:
        return  # –∑–Ω–∞—á–∏—Ç –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏

    order_id = awaiting_photo_to_send.pop(message.from_user.id)
    order = pending_orders.get(order_id)
    if not order:
        return await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    user_id = order["user_id"]

    # –ü–µ—Ä–µ—à–ª—ë–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(user_id, f"üì¶ –§–æ—Ç–æ –ø–æ –∑–∞–∫–∞–∑—É #{order_id}")
    await bot.forward_message(user_id, message.chat.id, message.message_id)

    await message.reply(f"–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–∞–∑–∞ #{order_id}.")
